{"version":3,"sources":["reducers/imageReducer.js","contexts/ImageContext.js","components/ImageForm.js","components/Navbar.js","components/ImageDetails.js","components/ImageList.js","App.js","serviceWorker.js","index.js"],"names":["imageReducer","state","action","type","imgUrl","image","id","uuid","filter","ImageContext","createContext","ImageContextProvider","props","useReducer","images","dispatch","Provider","value","children","ImageForm","useContext","useState","url","setUrl","className","onSubmit","e","preventDefault","placeholder","onChange","target","required","Navbar","length","ImageDetails","src","alt","onClick","ImageList","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAEaA,EAAe,SAACC,EAAOC,GAChC,OAAOA,EAAOC,MACV,IAAK,YACD,MAAM,GAAN,mBAAWF,GAAX,CAAkB,CACdG,OAAQF,EAAOG,MACfC,GAAGC,SAEX,IAAK,eACD,OAAON,EAAMO,QAAQ,SAAAH,GAAK,OAAIA,EAAMC,KAAOJ,EAAOI,MACtD,QACI,OAAOL,ICTNQ,EAAeC,0BAWbC,MATf,SAA8BC,GAAQ,IAAD,EACNC,qBAAWb,EAAc,IADnB,mBAC1Bc,EAD0B,KAClBC,EADkB,KAEjC,OACI,kBAACN,EAAaO,SAAd,CAAuBC,MAAS,CAACH,SAAQC,aACnCH,EAAMM,WCNL,SAASC,IAAa,IACzBJ,EAAaK,qBAAWX,GAAxBM,SADwB,EAEXM,mBAAS,IAFE,mBAEzBC,EAFyB,KAErBC,EAFqB,KAQhC,OACI,yBAAKC,UAAY,gBACb,0BAAMC,SAPO,SAACC,GAClBA,EAAEC,iBACFZ,EAAS,CAACZ,KAAM,YAAaE,MAAOiB,IACpCC,EAAO,MAKC,2BAAOC,UAAY,cAAcrB,KAAO,OAAOyB,YAAc,kBAC7DX,MAASK,EAAKO,SAAY,SAACH,GAAD,OAAOH,EAAOG,EAAEI,OAAOb,QAAQc,UAAQ,IAFrE,IAEwE,6BACpE,2BAAOP,UAAY,SAASrB,KAAO,SAASc,MAAQ,gBCZrD,SAASe,IAAU,IACtBlB,EAAWM,qBAAWX,GAAtBK,OACR,OACI,6BACI,yBAAKU,UAAY,UACb,6BACI,6CAGA,uCAAaV,EAAOmB,OAApB,cAGR,kBAACd,EAAD,OCZG,SAASe,EAAT,GAAkC,IAAV7B,EAAS,EAATA,MAC3BU,EAAaK,qBAAWX,GAAxBM,SACR,OACI,yBAAKS,UAAY,mBACb,yBAAKA,UAAY,SACb,yBAAKW,IAAO9B,EAAMD,OAAQgC,IAAM,iBAEpC,yBAAKZ,UAAY,cACb,4BAAQa,QAAW,kBAAMtB,EAAS,CAACZ,KAAK,eAAgBG,GAAID,EAAMC,OAAlE,kBCRD,SAASgC,IAAa,IACzBxB,EAAWM,qBAAWX,GAAtBK,OACR,OAAQA,EAAOmB,OAOX,6BACI,yBAAKT,UAAY,cACb,yBAAKA,UAAY,cACZV,EAAOyB,KAAI,SAAAlC,GACR,OACI,kBAAC6B,EAAD,CAAc7B,MAASA,EAAOmC,IAAOnC,EAAMC,WAX/D,6BACI,yBAAKkB,UAAY,SACb,mECQDiB,MAXf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,KACE,kBAACQ,EAAD,MACA,kBAACM,EAAD,SCCYI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2e6f3ab1.chunk.js","sourcesContent":["import uuid from 'uuid/v1'\r\n\r\nexport const imageReducer = (state, action) => {\r\n    switch(action.type){\r\n        case 'ADD_IMAGE':\r\n            return [...state, {\r\n                imgUrl: action.image,\r\n                id:uuid()\r\n            }]\r\n        case 'REMOVE_IMAGE':\r\n            return state.filter( image => image.id !== action.id )\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { createContext, useReducer } from 'react';\r\nimport { imageReducer } from '../reducers/imageReducer';\r\n\r\nexport const ImageContext = createContext()\r\n\r\nfunction ImageContextProvider(props) {\r\n    const [images, dispatch] = useReducer(imageReducer, [])\r\n    return (\r\n        <ImageContext.Provider value = {{images, dispatch}}>\r\n            { props.children }\r\n        </ImageContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ImageContextProvider\r\n","import React, { useContext,useState } from 'react'\r\nimport { ImageContext } from '../contexts/ImageContext'\r\n\r\nexport default function ImageForm() {\r\n    const { dispatch } = useContext(ImageContext)\r\n    const [url,setUrl] = useState('')\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        dispatch({type: 'ADD_IMAGE', image: url})\r\n        setUrl('')\r\n    }\r\n    return (\r\n        <div className = 'gallery-form'>\r\n            <form onSubmit = {handleSubmit}> \r\n                <input className = 'gallery-txt' type = 'text' placeholder = 'enter image url' \r\n                value = {url} onChange = {(e) => setUrl(e.target.value)} required/> <br />\r\n                <input className = 'submit' type = 'submit' value = 'Add Image'></input>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport{ ImageContext } from '../contexts/ImageContext'\r\nimport ImageForm from './ImageForm'\r\n\r\nexport default function Navbar() {\r\n    const { images } = useContext(ImageContext)\r\n    return (\r\n        <nav>\r\n            <div className = 'navbar'>\r\n                <div>\r\n                    <h1>\r\n                        Image Gallery\r\n                    </h1>\r\n                    <p>You have {images.length} images </p>\r\n                </div>\r\n            </div>\r\n            <ImageForm />\r\n        </nav>\r\n    )\r\n}\r\n","import React,{ useContext } from 'react'\r\nimport { ImageContext } from '../contexts/ImageContext'\r\n\r\n\r\nexport default function ImageDetails({ image }) {\r\n    const { dispatch } = useContext(ImageContext)\r\n    return (\r\n        <div className = 'image-container'>\r\n            <div className = 'image'>\r\n                <img src = {image.imgUrl} alt = 'gallery pic'/>\r\n            </div>\r\n            <div className = 'image-btns'>\r\n                <button onClick = {() => dispatch({type:'REMOVE_IMAGE', id: image.id})}>\r\n                    Delete Image\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{ useContext } from 'react'\r\nimport { ImageContext } from '../contexts/ImageContext'\r\nimport ImageDetails from '../components/ImageDetails'\r\n\r\nexport default function ImageList() {\r\n    const { images } = useContext(ImageContext)\r\n    return !images.length ? (\r\n        <div>\r\n            <div className = 'empty'>\r\n                <h2>We dont have any image. Lets add!</h2>\r\n            </div>\r\n        </div>\r\n    ) : (\r\n        <div>\r\n            <div className = 'image-list'>\r\n                <div className = 'image-grid'>\r\n                    {images.map(image => {\r\n                        return (\r\n                            <ImageDetails image = {image} key = {image.id} />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport ImageContextProvider from './contexts/ImageContext';\nimport Navbar from './components/Navbar';\nimport ImageList from './components/ImageList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ImageContextProvider>\n        <Navbar />\n        <ImageList />\n      </ImageContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}